"use strict";(self.webpackChunkmichelson_sdk_docs=self.webpackChunkmichelson_sdk_docs||[]).push([[229],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=s(t),m=l,d=f["".concat(c,".").concat(m)]||f[m]||p[m]||o;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=f;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:l,i[1]=a;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3465:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var r=t(7462),l=t(3366),o=(t(7294),t(3905)),i=["components"],a={},c="Value Reference",s={unversionedId:"values",id:"values",title:"Value Reference",description:"Official Michelson reference",source:"@site/docs/values.md",sourceDirName:".",slug:"/values",permalink:"michelson-sdk/values",editUrl:"https://github.com/RomarQ/michelson-sdk/tree/main/documentation/docs/values.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Type Reference",permalink:"michelson-sdk/types"}},u=[{value:"Singletons",id:"singletons",children:[{value:"nat",id:"nat",children:[],level:3},{value:"int",id:"int",children:[],level:3}],level:2},{value:"Containers",id:"containers",children:[{value:"list",id:"list",children:[],level:3},{value:"set",id:"set",children:[],level:3}],level:2}],p={toc:u};function f(e){var n=e.components,t=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"value-reference"},"Value Reference"),(0,o.kt)("p",null,"Official ",(0,o.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/michelson-reference"},"Michelson reference")),(0,o.kt)("h2",{id:"singletons"},"Singletons"),(0,o.kt)("h3",{id:"nat"},"nat"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Nat } from '@tezwell/michelson-sdk';\n\nconst nat_value = Nat(1);\n\n// Micheline\nconsole.log(nat_value.toMicheline());      // 1\n// JSON\nconsole.log(nat_value.toJSON());           // { int: '1' }\n")),(0,o.kt)("h3",{id:"int"},"int"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Int } from '@tezwell/michelson-sdk';\n\nconst int_value = Nat(1);\n\n// Micheline\nconsole.log(int_value.toMicheline());      // 1\n// JSON\nconsole.log(int_value.toJSON());           // { int: '1' }\n")),(0,o.kt)("h2",{id:"containers"},"Containers"),(0,o.kt)("h3",{id:"list"},"list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { List, Nat, TNat } from '@tezwell/michelson-sdk';\n\nconst list_value = List([Nat(1), Nat(2)], TNat());\n\n// Micheline\nconsole.log(list_value.toMicheline());      // { 1 ; 2 }\n// JSON\nconsole.log(list_value.toJSON());           // [ { int: '1' }, { int: '2' } ]\n")),(0,o.kt)("h3",{id:"set"},"set"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Set, Nat, TNat } from '@tezwell/michelson-sdk';\n\nconst set_value = Set([Nat(1), Nat(2)], TNat());\n\n// Micheline\nconsole.log(set_value.toMicheline());      // { 1 ; 2 }\n// JSON\nconsole.log(set_value.toJSON());           // [ { int: '1' }, { int: '2' } ]\n")))}f.isMDXComponent=!0}}]);