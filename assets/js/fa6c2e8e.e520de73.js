"use strict";(self.webpackChunkmichelson_sdk_docs=self.webpackChunkmichelson_sdk_docs||[]).push([[460],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=l,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3532:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=n(7462),l=n(3366),i=(n(7294),n(3905)),a=["components"],o={},s="Type Reference",p={unversionedId:"types",id:"types",title:"Type Reference",description:"Official Michelson type reference",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/michelson-sdk/types",editUrl:"https://github.com/RomarQ/michelson-sdk/tree/main/documentation/docs/types.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Overview",permalink:"/michelson-sdk/"},next:{title:"Value Reference",permalink:"/michelson-sdk/values"}},c=[{value:"Singleton types",id:"singleton-types",children:[{value:"nat",id:"nat",children:[],level:3},{value:"int",id:"int",children:[],level:3},{value:"mutez",id:"mutez",children:[],level:3},{value:"string",id:"string",children:[],level:3},{value:"bool",id:"bool",children:[],level:3},{value:"bytes",id:"bytes",children:[],level:3},{value:"address",id:"address",children:[],level:3},{value:"timestamp",id:"timestamp",children:[],level:3},{value:"chain_id",id:"chain_id",children:[],level:3},{value:"bls12_381_fr",id:"bls12_381_fr",children:[],level:3},{value:"bls12_381_g1",id:"bls12_381_g1",children:[],level:3},{value:"bls12_381_g2",id:"bls12_381_g2",children:[],level:3},{value:"key",id:"key",children:[],level:3},{value:"key_hash",id:"key_hash",children:[],level:3},{value:"signature",id:"signature",children:[],level:3},{value:"unit",id:"unit",children:[],level:3}],level:2},{value:"Container types",id:"container-types",children:[{value:"list",id:"list",children:[],level:3},{value:"set",id:"set",children:[],level:3},{value:"option",id:"option",children:[],level:3},{value:"pair",id:"pair",children:[],level:3},{value:"record",id:"record",children:[],level:3},{value:"map",id:"map",children:[],level:3},{value:"big_map",id:"big_map",children:[],level:3},{value:"lambda",id:"lambda",children:[],level:3}],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"type-reference"},"Type Reference"),(0,i.kt)("p",null,"Official ",(0,i.kt)("a",{parentName:"p",href:"https://tezos.gitlab.io/michelson-reference/#type-reference"},"Michelson type reference")),(0,i.kt)("h2",{id:"singleton-types"},"Singleton types"),(0,i.kt)("h3",{id:"nat"},"nat"),(0,i.kt)("p",null,"Naturals are arbitrary-precision, meaning that the only size limit is gas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TNat } from '@tezwell/michelson-sdk';\n\nconst nat_type = TNat();\n\n// Micheline\nconsole.log(nat_type.toMicheline());      // nat\n// JSON\nconsole.log(nat_type.toJSON());           // { prim: 'nat' }\n")),(0,i.kt)("h3",{id:"int"},"int"),(0,i.kt)("p",null,"Integers are arbitrary-precision, meaning that the only size limit is gas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TInt } from '@tezwell/michelson-sdk';\n\nconst int_type = TInt();\n\n// Micheline\nconsole.log(int_type.toMicheline());      // int\n// JSON\nconsole.log(int_type.toJSON());           // { prim: 'int' }\n")),(0,i.kt)("h3",{id:"mutez"},"mutez"),(0,i.kt)("p",null,"Mutez (micro-Tez) are internally represented by ",(0,i.kt)("strong",{parentName:"p"},"64-bit")," signed integers. These are restricted to prevent creating a negative amount of mutez."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TMutez } from '@tezwell/michelson-sdk';\n\nconst mutez_type = TMutez();\n\n// Micheline\nconsole.log(mutez_type.toMicheline());      // mutez\n// JSON\nconsole.log(mutez_type.toJSON());           // { prim: 'mutez' }\n")),(0,i.kt)("h3",{id:"string"},"string"),(0,i.kt)("p",null,"The current version of Michelson restricts strings to be the printable subset of ",(0,i.kt)("strong",{parentName:"p"},"7-bit ASCII"),", namely characters with codes from within ","[32, 126]"," range, plus the following escape characters ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\\\"),", ",(0,i.kt)("inlineCode",{parentName:"p"},'\\"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TString } from '@tezwell/michelson-sdk';\n\nconst string_type = TString();\n\n// Micheline\nconsole.log(string_type.toMicheline());      // string\n// JSON\nconsole.log(string_type.toJSON());           // { prim: 'string' }\n")),(0,i.kt)("h3",{id:"bool"},"bool"),(0,i.kt)("p",null,"The type for booleans whose values are ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TBool } from '@tezwell/michelson-sdk';\n\nconst bool_type = TBool();\n\n// Micheline\nconsole.log(bool_type.toMicheline());      // bool\n// JSON\nconsole.log(bool_type.toJSON());           // { prim: 'bool' }\n")),(0,i.kt)("h3",{id:"bytes"},"bytes"),(0,i.kt)("p",null,"Bytes are used for serializing data, in order to check signatures and compute hashes on them. They can also be used to incorporate data from the wild and untyped outside world."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TBytes } from '@tezwell/michelson-sdk';\n\nconst bytes_type = TBytes();\n\n// Micheline\nconsole.log(bytes_type.toMicheline());      // bytes\n// JSON\nconsole.log(bytes_type.toJSON());           // { prim: 'bytes' }\n")),(0,i.kt)("h3",{id:"address"},"address"),(0,i.kt)("p",null,"The address type merely gives the guarantee that the value has the form of a Tezos address, as opposed to contract that guarantees that the value is indeed a valid, existing account."),(0,i.kt)("p",null,"A valid Tezos address is a string prefixed by either ",(0,i.kt)("inlineCode",{parentName:"p"},"tz1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tz2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tz3")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"KT1")," and followed by a Base58 encoded hash and terminated by a 4-byte checksum."),(0,i.kt)("p",null,"The prefix designates the type of address:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"tz1"))," addresses are followed by a ed25519 public key hash"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"tz2"))," addresses are followed by a Secp256k1 public key hash"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"tz3"))," addresses are followed by a NIST p256r1 public key hash"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"KT1"))," addresses are followed by a contract hash")),(0,i.kt)("p",null,"Addresses prefixed by tz1, tz2 and tz3 designate implicit accounts, whereas those prefixed KT1 designate originated accounts."),(0,i.kt)("p",null,"Addresses can also specify an entrypoint, with a ",(0,i.kt)("inlineCode",{parentName:"p"},"%<entrypoint_name>")," suffix."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TAddress } from '@tezwell/michelson-sdk';\n\nconst address_type = TAddress();\n\n// Micheline\nconsole.log(address_type.toMicheline());      // address\n// JSON\nconsole.log(address_type.toJSON());           // { prim: 'address' }\n")),(0,i.kt)("h3",{id:"timestamp"},"timestamp"),(0,i.kt)("h3",{id:"chain_id"},"chain_id"),(0,i.kt)("h3",{id:"bls12_381_fr"},"bls12_381_fr"),(0,i.kt)("h3",{id:"bls12_381_g1"},"bls12_381_g1"),(0,i.kt)("h3",{id:"bls12_381_g2"},"bls12_381_g2"),(0,i.kt)("h3",{id:"key"},"key"),(0,i.kt)("h3",{id:"key_hash"},"key_hash"),(0,i.kt)("h3",{id:"signature"},"signature"),(0,i.kt)("h3",{id:"unit"},"unit"),(0,i.kt)("h2",{id:"container-types"},"Container types"),(0,i.kt)("h3",{id:"list"},"list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TList, TNat } from '@tezwell/michelson-sdk';\n\nconst list_type = TList(TNat());\n\n// Micheline\nconsole.log(list_type.toMicheline());      // (list nat)\n// JSON\nconsole.log(list_type.toJSON());           // { prim: 'list', args: [ { prim: 'nat' } ] }\n")),(0,i.kt)("h3",{id:"set"},"set"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TSet, TNat } from '@tezwell/michelson-sdk';\n\nconst set_type = TSet(TNat());\n\n// Micheline\nconsole.log(set_type.toMicheline());      // (set nat)\n// JSON\nconsole.log(set_type.toJSON());           // { prim: 'set', args: [ { prim: 'nat' } ] }\n")),(0,i.kt)("h3",{id:"option"},"option"),(0,i.kt)("h3",{id:"pair"},"pair"),(0,i.kt)("h3",{id:"record"},"record"),(0,i.kt)("h3",{id:"map"},"map"),(0,i.kt)("h3",{id:"big_map"},"big_map"),(0,i.kt)("h3",{id:"lambda"},"lambda"))}u.isMDXComponent=!0}}]);