"use strict";(self.webpackChunkmichelson_sdk_docs=self.webpackChunkmichelson_sdk_docs||[]).push([[711],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=l(t),m=o,f=g["".concat(c,".").concat(m)]||g[m]||p[m]||s;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3567:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return g}});var r=t(7462),o=t(3366),s=(t(7294),t(3905)),a=["components"],i={},c="Using with ConseilJS",l={unversionedId:"conseiljs",id:"conseiljs",title:"Using with ConseilJS",description:"Install dependencies",source:"@site/docs/conseiljs.md",sourceDirName:".",slug:"/conseiljs",permalink:"/michelson-sdk/conseiljs",editUrl:"https://github.com/RomarQ/michelson-sdk/tree/main/documentation/docs/conseiljs.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Using with Taquito",permalink:"/michelson-sdk/taquito"}},d=[{value:"Install dependencies",id:"install-dependencies",children:[],level:2},{value:"Interact with an FA2 contract",id:"interact-with-an-fa2-contract",children:[{value:"transfer",id:"transfer",children:[],level:3},{value:"balance_of",id:"balance_of",children:[],level:3},{value:"update_operators",id:"update_operators",children:[],level:3}],level:2}],p={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"using-with-conseiljs"},"Using with ConseilJS"),(0,s.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/michelson-sdk conseiljs conseiljs-softsigner node-fetch loglevel\n")),(0,s.kt)("h2",{id:"interact-with-an-fa2-contract"},"Interact with an FA2 contract"),(0,s.kt)("h3",{id:"transfer"},"transfer"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import fetch from 'node-fetch';\nimport log from 'loglevel';\n\nimport { registerFetch, registerLogger, TezosMessageUtils, TezosParameterFormat, TezosNodeWriter } from 'conseiljs';\nimport { KeyStoreUtils, SoftSigner  } from 'conseiljs-softsigner';\nimport { Record, Address, List, Nat } from '@tezwell/michelson-sdk/literal';\n\nconst logger = log.getLogger('conseiljs');\nlogger.setLevel('debug', false); // to see only errors, set to 'error'\nregisterLogger(logger);\nregisterFetch(fetch);\n\nconst RPC = 'https://ithacanet.visualtez.com';\nconst contract = 'KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF'\n\nconst parameters = List(\n    [\n        Record({\n            from_: Address('tz1gTnKMA65qaKVpp6x4cgMLU2UyKF2zjHYN'),\n            txs: List(\n                [\n                    Record({\n                        to_: Address('KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF'),\n                        token_id: Nat(0),\n                        amount: Nat(10),\n                    })\n                ]\n            ),\n        })\n    ]\n).toJSON();\n\n(async () => {\n    const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey('edskS83aZUK3ijLrW5tTs1sDY3qLjSsMGyebKKLWP4RXSBh4LCivG2s1TezyZB5rEvvdqepXMg1MLcfBhS8VSJESN7L27hDpsX');\n    const signer = await SoftSigner.createSigner(TezosMessageUtils.writeKeyWithHint(keyStore.secretKey, 'edsk'), -1);\n\n    const result = await TezosNodeWriter.sendContractInvocationOperation(\n        RPC,\n        signer,\n        keyStore,\n        contract,\n        10_000,\n        100_000,\n        10_000,\n        100_000,\n        'transfer',\n        JSON.stringify(parameters),\n        TezosParameterFormat.Micheline\n    );\n    console.log(\"Injected operation: \", result.operationGroupID);\n})();\n")),(0,s.kt)("h3",{id:"balance_of"},"balance_of"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import fetch from 'node-fetch';\nimport log from 'loglevel';\n\nimport { registerFetch, registerLogger, TezosMessageUtils, TezosParameterFormat, TezosNodeWriter } from 'conseiljs';\nimport { KeyStoreUtils, SoftSigner  } from 'conseiljs-softsigner';\nimport { Record, Address, List, Nat, Contract } from '@tezwell/michelson-sdk/literal';\n\nconst logger = log.getLogger('conseiljs');\nlogger.setLevel('debug', false); // to see only errors, set to 'error'\nregisterLogger(logger);\nregisterFetch(fetch);\n\nconst RPC = 'https://ithacanet.visualtez.com';\nconst contract = 'KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF'\n\nconst parameters = Record({\n    requests: List(\n        [\n            Record({\n                owner: Address(\"KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF\"),\n                token_id: Nat(0)\n            }),\n            Record({\n                owner: Address(\"tz1gTnKMA65qaKVpp6x4cgMLU2UyKF2zjHYN\"),\n                token_id: Nat(0)\n            })\n        ]\n    ),\n    callback: Contract(\"KT1SiSomCunxkq3g7vQKYpPpWBHodhH5pJkU\", \"receive_balances\")\n}).toJSON();\n\n(async () => {\n    const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey('edskS83aZUK3ijLrW5tTs1sDY3qLjSsMGyebKKLWP4RXSBh4LCivG2s1TezyZB5rEvvdqepXMg1MLcfBhS8VSJESN7L27hDpsX');\n    const signer = await SoftSigner.createSigner(TezosMessageUtils.writeKeyWithHint(keyStore.secretKey, 'edsk'), -1);\n\n    const result = await TezosNodeWriter.sendContractInvocationOperation(\n        RPC,\n        signer,\n        keyStore,\n        contract,\n        10_000,\n        100_000,\n        10_000,\n        100_000,\n        'balance_of',\n        JSON.stringify(parameters),\n        TezosParameterFormat.Micheline\n    );\n    console.log(\"Injected operation: \", result.operationGroupID);\n})();\n")),(0,s.kt)("h3",{id:"update_operators"},"update_operators"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import fetch from 'node-fetch';\nimport log from 'loglevel';\n\nimport { registerFetch, registerLogger, TezosMessageUtils, TezosParameterFormat, TezosNodeWriter } from 'conseiljs';\nimport { KeyStoreUtils, SoftSigner  } from 'conseiljs-softsigner';\nimport { Record, Address, List, Nat, Variant } from '@tezwell/michelson-sdk/literal';\nimport { TRecord, TAddress, TNat, TVariant } from '@tezwell/michelson-sdk/type';\n\nconst logger = log.getLogger('conseiljs');\nlogger.setLevel('debug', false); // to see only errors, set to 'error'\nregisterLogger(logger);\nregisterFetch(fetch);\n\nconst RPC = 'https://ithacanet.visualtez.com';\nconst contract = 'KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF'\n\nconst VariantType = TVariant({\n    add_operator: TRecord({\n        owner: TAddress(),\n        operator: TAddress(),\n        token_id: TNat(),\n    }),\n    remove_operator: TRecord({\n        owner: TAddress(),\n        operator: TAddress(),\n        token_id: TNat(),\n    })\n});\nconst parameters = List(\n    [\n        Variant(\n            \"add_operator\",\n            Record({\n                owner: Address(\"tz1gTnKMA65qaKVpp6x4cgMLU2UyKF2zjHYN\"),\n                operator: Address(\"KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF\"),\n                token_id: Nat(0),\n            }),\n            VariantType\n        ),\n        Variant(\n            \"remove_operator\",\n            Record({\n                owner: Address(\"tz1gTnKMA65qaKVpp6x4cgMLU2UyKF2zjHYN\"),\n                operator: Address(\"KT1JehYdejjvFf1BqdXzTPt1QWqqSd3xS4JF\"),\n                token_id: Nat(0),\n            }),\n            VariantType\n        )\n    ]\n).toJSON();\n\n(async () => {\n    const keyStore = await KeyStoreUtils.restoreIdentityFromSecretKey('edskS83aZUK3ijLrW5tTs1sDY3qLjSsMGyebKKLWP4RXSBh4LCivG2s1TezyZB5rEvvdqepXMg1MLcfBhS8VSJESN7L27hDpsX');\n    const signer = await SoftSigner.createSigner(TezosMessageUtils.writeKeyWithHint(keyStore.secretKey, 'edsk'), -1);\n\n    const result = await TezosNodeWriter.sendContractInvocationOperation(\n        RPC,\n        signer,\n        keyStore,\n        contract,\n        10_000,\n        100_000,\n        10_000,\n        100_000,\n        'update_operators',\n        JSON.stringify(parameters),\n        TezosParameterFormat.Micheline\n    );\n    console.log(\"Injected operation: \", result.operationGroupID);\n})();\n")))}g.isMDXComponent=!0}}]);