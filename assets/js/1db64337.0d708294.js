"use strict";(self.webpackChunkmichelson_sdk_docs=self.webpackChunkmichelson_sdk_docs||[]).push([[372],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6777:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1,slug:"/"},c="Overview",s={unversionedId:"overview",id:"overview",title:"Overview",description:"CI",source:"@site/docs/overview.md",sourceDirName:".",slug:"/",permalink:"/",editUrl:"https://github.com/RomarQ/michelson-sdk/tree/main/documentation/docs/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/"},sidebar:"sidebar",next:{title:"Type Reference",permalink:"/types"}},p=[{value:"Getting Started",id:"getting-started",children:[{value:"Install the package",id:"install-the-package",children:[],level:3},{value:"Use the package",id:"use-the-package",children:[{value:"Compile a value and its type",id:"compile-a-value-and-its-type",children:[],level:4},{value:"Compile a type",id:"compile-a-type",children:[],level:4}],level:3}],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/RomarQ/michelson-sdk/workflows/CI/badge.svg",alt:"CI"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://coveralls.io/repos/github/RomarQ/michelson-sdk/badge.svg?branch=main",alt:"Coverage Status"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Michelson SDK"))," is a framework for generating Michelson values and types from Javascript."),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("h3",{id:"install-the-package"},"Install the package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @tezwell/michelson-sdk\n")),(0,i.kt)("h3",{id:"use-the-package"},"Use the package"),(0,i.kt)("h4",{id:"compile-a-value-and-its-type"},"Compile a value and its type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { List, Nat, TNat } from '@tezwell/michelson-sdk';\n\nconst literal = List([Nat(1), Nat(2)], TNat());\n\n// Micheline\nconsole.log(literal.toMicheline());         // { 1 ; 2 }\nconsole.log(literal.type.toMicheline());    // (list nat)\n\n// JSON\nconsole.log(literal.toJSON());              // [ { int: '1' }, { int: '2' } ]\nconsole.log(literal.type.toJSON());         // { prim: 'list', args: [ { prim: 'nat' } ] }\n")),(0,i.kt)("h4",{id:"compile-a-type"},"Compile a type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { TList, TNat } from '@tezwell/michelson-sdk';\n\nconst list_type = TList(TNat());\n\n// Micheline\nconsole.log(list_type.toMicheline());    // (list nat)\n\n// JSON\nconsole.log(list_type.toJSON());         // { prim: 'list', args: [ { prim: 'nat' } ] }\n")))}m.isMDXComponent=!0}}]);